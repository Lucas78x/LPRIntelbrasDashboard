@model IEnumerable<LPRIntelbrasDashboard.DTO.Alerta>

@{
    ViewData["Title"] = "Gerenciamento de Alertas";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet" />
<link href="~/css/dashboard.css" rel="stylesheet" />

<div class="container-fluid dashboard-container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="fw-bold text-danger mb-0">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>Gerenciamento de Alertas
            </h2>
            <p class="text-muted mb-0">Crie, visualize e gerencie alertas de placas específicas.</p>
        </div>

        <!-- TOGGLE DARK/LIGHT MODE -->
        <button id="themeToggle" class="btn btn-outline-secondary rounded-circle" title="Alternar tema">
            <i id="themeIcon" class="bi bi-moon"></i>
        </button>
    </div>

    <!-- FORMULÁRIO DE CRIAÇÃO -->
    <div class="card shadow-sm border-0 mb-4">
        <div class="card-header bg-light fw-semibold">
            <i class="bi bi-plus-circle me-2"></i>Novo Alerta
        </div>
        <div class="card-body">
            <form id="formAlerta" class="row g-3">
                <div class="col-md-4">
                    <label class="form-label fw-semibold">Placa</label>
                    <input type="text" id="placa" class="form-control" placeholder="Ex: ABC1D23" required />
                </div>
                <div class="col-md-4">
                    <label class="form-label fw-semibold">Nome / Identificação</label>
                    <input type="text" id="nome" class="form-control" placeholder="Ex: Veículo suspeito" required />
                </div>
                <div class="col-md-4 d-flex align-items-end">
                    <button type="submit" class="btn btn-danger w-100">
                        <i class="bi bi-plus-lg me-1"></i>Adicionar Alerta
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- TABELA DE ALERTAS -->
    <div class="card shadow-sm border-0">
        <div class="card-header bg-light fw-semibold d-flex justify-content-between align-items-center">
            <span><i class="bi bi-bell-fill me-2"></i>Alertas Cadastrados</span>
            <small class="text-muted">Gerencie ou remova alertas</small>
        </div>
        <div class="table-responsive table-scroll">
            <table class="table table-hover align-middle mb-0">
                <thead class="table-danger sticky-top">
                    <tr>
                        <th>ID</th>
                        <th>Placa</th>
                        <th>Nome</th>
                        <th>Ações</th>
                    </tr>
                </thead>
                <tbody id="tabelaAlertas">
                    <tr>
                        <td colspan="4" class="text-center text-muted py-4">
                            <i class="bi bi-hourglass-split me-2"></i>Carregando alertas...
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

<!-- DARK/LIGHT TOGGLE SCRIPT -->
<script>
    const themeToggle = document.getElementById("themeToggle");
    const themeIcon = document.getElementById("themeIcon");

    function applyTheme(isDark) {
        document.body.classList.toggle("dark-mode", isDark);
        themeIcon.className = isDark ? "bi bi-sun" : "bi bi-moon";
        localStorage.setItem("theme", isDark ? "dark" : "light");
    }

    themeToggle.addEventListener("click", () => {
        const isDark = !document.body.classList.contains("dark-mode");
        applyTheme(isDark);
    });

    if (localStorage.getItem("theme") === "dark") {
        applyTheme(true);
    }

    // =======================
    // CRUD DE ALERTAS (API)
    // =======================
    const apiUrl = "/api/v1/alerta";
    const tabela = document.getElementById("tabelaAlertas");
    const form = document.getElementById("formAlerta");

    async function carregarAlertas() {
        try {
            const res = await fetch(`${apiUrl}/listar`);
            if (!res.ok) throw new Error("Erro ao buscar alertas");
            const dados = await res.json();

            if (dados.length === 0) {
                tabela.innerHTML = `<tr><td colspan="4" class="text-center text-muted py-4"><i class="bi bi-info-circle me-2"></i>Nenhum alerta cadastrado.</td></tr>`;
                return;
            }

            tabela.innerHTML = "";
            dados.forEach(a => {
                tabela.innerHTML += `
                    <tr>
                        <td>${a.id}</td>
                        <td class="fw-semibold">${a.placa}</td>
                        <td>${a.nome}</td>
                        <td>
                            <button class="btn btn-sm btn-outline-primary me-2" onclick="editarAlerta(${a.id}, '${a.placa}', '${a.nome}')">
                                <i class="bi bi-pencil"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger" onclick="deletarAlerta(${a.id})">
                                <i class="bi bi-trash"></i>
                            </button>
                        </td>
                    </tr>`;
            });
        } catch (err) {
            tabela.innerHTML = `<tr><td colspan="4" class="text-center text-danger py-4">${err.message}</td></tr>`;
        }
    }

    async function criarAlerta(e) {
        e.preventDefault();

        const placa = document.getElementById("placa").value.trim();
        const nome = document.getElementById("nome").value.trim();

        const res = await fetch(`${apiUrl}/criar`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ placa, nome })
        });

        if (res.ok) {
            form.reset();
            await carregarAlertas();
        } else {
            alert("Erro ao criar alerta");
        }
    }

    async function editarAlerta(id, placa, nome) {
        const novaPlaca = prompt("Nova placa:", placa);
        const novoNome = prompt("Novo nome:", nome);

        if (!novaPlaca || !novoNome) return;

        const res = await fetch(`${apiUrl}/editar/${id}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ placa: novaPlaca, nome: novoNome })
        });

        if (res.ok) {
            await carregarAlertas();
        } else {
            alert("Erro ao editar alerta");
        }
    }

    async function deletarAlerta(id) {
        if (!confirm("Tem certeza que deseja excluir este alerta?")) return;

        const res = await fetch(`${apiUrl}/deletar/${id}`, { method: "DELETE" });
        if (res.ok) {
            await carregarAlertas();
        } else {
            alert("Erro ao excluir alerta");
        }
    }

    form.addEventListener("submit", criarAlerta);
    carregarAlertas();
</script>
