@model LPRIntelbrasDashboard.Models.DashboardViewModel
@{
    ViewBag.Title = "Painel de Placas";
    Layout = null;
}

<!-- CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdn.datatables.net/1.13.4/css/dataTables.bootstrap5.min.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />

<style>
    :root {
        --primary-gradient: linear-gradient(135deg, #007bff 0%, #00b4ff 100%);
        --success-gradient: linear-gradient(135deg, #28a745 0%, #5cb85c 100%);
        --danger-gradient: linear-gradient(135deg, #dc3545 0%, #ff6b6b 100%);
        --header-gradient: linear-gradient(135deg, #2c3e50 0%, #3498db 100%);
    }

    body {
        font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
        background-color: #f8fafc;
        color: #334155;
    }

    .dashboard-header {
        background: var(--header-gradient);
        color: white;
        padding: 1.5rem 0;
        margin-bottom: 2rem;
        border-radius: 0 0 1rem 1rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    .metric-card {
        transition: all 0.3s ease;
        border: none;
        border-radius: 0.75rem;
        overflow: hidden;
        position: relative;
        z-index: 1;
    }

        .metric-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            opacity: 0.1;
            z-index: -1;
        }

        .metric-card.primary::before {
            background: var(--primary-gradient);
        }

        .metric-card.success::before {
            background: var(--success-gradient);
        }

        .metric-card.danger::before {
            background: var(--danger-gradient);
        }

        .metric-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }

    .metric-icon {
        font-size: 2rem;
        margin-bottom: 1rem;
        opacity: 0.8;
    }

    .filter-card {
        background: white;
        border-radius: 0.75rem;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
        border: none;
    }

    .btn-primary {
        background: var(--primary-gradient);
        border: none;
        font-weight: 500;
        transition: all 0.3s ease;
    }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(0, 123, 255, 0.3);
        }

    .chart-card, .table-card {
        background: white;
        border-radius: 0.75rem;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
        border: none;
    }

    .badge-plate {
        background: #1e293b;
        color: white;
        font-family: monospace;
        font-size: 0.9em;
        letter-spacing: 1px;
        padding: 0.35em 0.75em;
        border-radius: 0.5em;
    }

    .table thead {
        background: var(--header-gradient);
        color: white;
    }

    .table-hover tbody tr:hover {
        background-color: rgba(52, 152, 219, 0.1);
    }

    .dataTables_wrapper .dataTables_filter input {
        border-radius: 0.5rem;
        padding: 0.375rem 0.75rem;
        border: 1px solid #ced4da;
    }

    .dataTables_wrapper .dataTables_paginate .paginate_button {
        border-radius: 0.5rem !important;
        margin: 0 2px;
    }
</style>

<div class="dashboard-header">
    <div class="container">
        <div class="d-flex justify-content-between align-items-center">
            <h1 class="h2 mb-0"><i class="fas fa-car-alt me-2"></i> Painel de Reconhecimento de Placas</h1>
            <div class="text-end">
                <small class="d-block opacity-75">Última atualização: @DateTime.Now.ToString("dd/MM/yyyy HH:mm")</small>
            </div>
        </div>
    </div>
</div>

<div class="container mb-5">
    <!-- Filtros -->
    <div class="filter-card p-4 mb-4">
        <form method="get" class="row g-3 align-items-end">
            <div class="col-md-4">
                <label class="form-label fw-semibold"><i class="fas fa-search me-2"></i>Filtrar por placa</label>
                <input type="text" name="filtroPlaca" class="form-control" placeholder="Ex: ABC1234" />
            </div>
            <div class="col-md-4">
                <label class="form-label fw-semibold"><i class="fas fa-map-marker-alt me-2"></i>Região</label>
                <select name="regiao" class="form-select">
                    <option value="">Todas</option>
                    @foreach (var reg in Model.Regioes)
                    {
                        <option value="@reg">@reg</option>
                    }
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label fw-semibold"><i class="far fa-calendar-alt me-2"></i>Data</label>
                <input type="date" name="data" class="form-control" />
            </div>
            <div class="col-md-1">
                <button type="submit" class="btn btn-primary w-100">
                    <i class="fas fa-filter me-1"></i> Filtrar
                </button>
            </div>
        </form>
    </div>

    <!-- Métricas -->
    <div class="row g-4 mb-4">
        <div class="col-md-4">
            <div class="metric-card primary h-100 p-4 text-center">
                <div class="metric-icon text-primary">
                    <i class="fas fa-chart-bar"></i>
                </div>
                <h6 class="text-muted">Total de Placas</h6>
                <h3 class="fw-bold text-primary">@Model.TotalPlacas</h3>
                <small class="text-muted">Desde o início</small>
            </div>
        </div>
        <div class="col-md-4">
            <div class="metric-card success h-100 p-4 text-center">
                <div class="metric-icon text-success">
                    <i class="fas fa-map-marked-alt"></i>
                </div>
                <h6 class="text-muted">Regiões Detectadas</h6>
                <h3 class="fw-bold text-success">@Model.Regioes.Count</h3>
                <small class="text-muted">Áreas cobertas</small>
            </div>
        </div>
        <div class="col-md-4">
            <div class="metric-card danger h-100 p-4 text-center">
                <div class="metric-icon text-danger">
                    <i class="fas fa-clock"></i>
                </div>
                <h6 class="text-muted">Último Registro</h6>
                <h5 class="fw-bold text-danger">
                    @(Model.Registros.OrderByDescending(r => r.DataHora).FirstOrDefault()?.DataHora.ToString("dd/MM/yyyy HH:mm") ?? "-")
                </h5>
                <small class="text-muted">Atividade recente</small>
            </div>
        </div>
    </div>

    <!-- Gráfico -->
    <div class="chart-card p-4 mb-4">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h5 class="mb-0"><i class="fas fa-chart-line me-2"></i>Registros por Dia</h5>
            <div class="btn-group btn-group-sm">
                <button class="btn btn-outline-secondary active">7 dias</button>
                <button class="btn btn-outline-secondary">15 dias</button>
                <button class="btn btn-outline-secondary">30 dias</button>
            </div>
        </div>
        <canvas id="grafico" height="120"></canvas>
    </div>

    <!-- Tabela -->
    <div class="table-card p-4">
        <h5 class="mb-3"><i class="fas fa-table me-2"></i>Registros Detalhados</h5>
        <div class="table-responsive">
            <table id="tabelaPlacas" class="table table-hover table-striped align-middle">
                <thead>
                    <tr>
                        <th><i class="far fa-calendar me-2"></i>Data</th>
                        <th><i class="fas fa-car me-2"></i>Placa</th>
                        <th><i class="fas fa-tag me-2"></i>Marca</th>
                        <th><i class="fas fa-palette me-2"></i>Cor</th>
                        <th><i class="fas fa-tachometer-alt me-2"></i>Velocidade</th>
                        <th><i class="fas fa-map-marker-alt me-2"></i>Região</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Registros)
                    {
                        <tr>
                            <td>@item.DataHora.ToString("dd/MM/yyyy HH:mm")</td>
                            <td><span class="badge-plate">@item.NPlaca</span></td>
                            <td>@item.Marca</td>
                            <td>
                                <span class="badge rounded-pill" style="background-color: @GetColorHex(item.CorVeiculo); color: white;">
                                    @item.CorVeiculo
                                </span>
                            </td>
                            <td>
                                <span class="badge @GetSpeedBadgeClass(item.VelocKmH)">
                                    @item.VelocKmH km/h
                                </span>
                            </td>
                            <td>@item.Região</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Scripts -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/1.13.4/js/dataTables.bootstrap5.min.js"></script>

<script>
    // Tabela
    $(document).ready(function () {
        $('#tabelaPlacas').DataTable({
            language: {
                url: '//cdn.datatables.net/plug-ins/1.13.4/i18n/pt-BR.json'
            },
            dom: '<"top"f>rt<"bottom"lip><"clear">',
            responsive: true
        });
    });

    // Gráfico
    const ctx = document.getElementById('grafico').getContext('2d');
    const grafico = new Chart(ctx, {
        type: 'line',
        data: {
            labels: [
                @Html.Raw(string.Join(",", Model.Registros
                    .GroupBy(r => r.DataHora.Date)
                    .OrderBy(g => g.Key)
                    .Take(7)
                    .Select(g => $"'{g.Key.ToString("dd/MM")}'")))
            ],
            datasets: [{
                label: 'Registros por Dia',
                data: [
                    @string.Join(",", Model.Registros
                        .GroupBy(r => r.DataHora.Date)
                        .OrderBy(g => g.Key)
                        .Take(7)
                        .Select(g => g.Count()))
                ],
                fill: true,
                borderColor: '#3498db',
                backgroundColor: 'rgba(52, 152, 219, 0.1)',
                tension: 0.3,
                pointRadius: 4,
                pointHoverRadius: 6,
                pointBackgroundColor: '#fff',
                pointBorderColor: '#3498db',
                pointBorderWidth: 2
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    backgroundColor: '#2c3e50',
                    titleFont: {
                        weight: 'bold'
                    },
                    bodyFont: {
                        size: 14
                    },
                    padding: 12,
                    cornerRadius: 6
                }
            },
            scales: {
                x: {
                    grid: {
                        display: false
                    },
                    ticks: {
                        color: '#64748b'
                    }
                },
                y: {
                    grid: {
                        color: 'rgba(0, 0, 0, 0.05)'
                    },
                    ticks: {
                        color: '#64748b'
                    }
                }
            }
        }
    });
</script>

@functions {
    public string GetColorHex(string colorName)
    {
        var colors = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
        {
            {"Branco", "#ffffff"},
            {"Preto", "#000000"},
            {"Prata", "#c0c0c0"},
            {"Cinza", "#808080"},
            {"Vermelho", "#ff0000"},
            {"Azul", "#0000ff"},
            {"Verde", "#008000"},
            {"Amarelo", "#ffff00"},
            {"Laranja", "#ffa500"},
            {"Marrom", "#a52a2a"},
            {"Bege", "#f5f5dc"},
            {"Dourado", "#ffd700"}
        };

        return colors.TryGetValue(colorName, out var hex) ? hex : "#6c757d";
    }

    public string GetSpeedBadgeClass(int speed)
    {
        if (speed > 100) return "bg-danger";
        if (speed > 80) return "bg-warning text-dark";
        return "bg-success";
    }
}